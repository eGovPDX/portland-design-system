{"version":3,"file":"themeLoader.js","sources":["../src/themeLoader.js"],"sourcesContent":["const loadedThemes = new Set();\n\n/**\n * Dynamically loads a theme's CSS. This function relies on the consumer's bundler\n * to handle the dynamic import and inject the stylesheet.\n *\n * @param {string} themeName The name of the theme to load (e.g., 'pgov', 'pgov-dark').\n * @returns {Promise<void>} A promise that resolves when the theme is loaded or rejects on error.\n */\nexport async function loadTheme(themeName) {\n  if (loadedThemes.has(themeName)) {\n    return;\n  }\n\n  try {\n    switch (themeName) {\n      case 'pgov':\n        await import('./styles/themes/pgov.css');\n        break;\n      case 'pgov-dark':\n        await import('./styles/themes/pgov.css');\n        await import('./styles/themes/pgov-dark.css');\n        break;\n      case 'uswds-default':\n        await import('./styles/themes/uswds-default.css');\n        break;\n      default:\n        console.warn(`Theme \"${themeName}\" not found.`);\n        return;\n    }\n    loadedThemes.add(themeName);\n  } catch (error) {\n    console.error(`Failed to load theme \"${themeName}\":`, error);\n    throw error;\n  }\n} "],"names":["loadedThemes","loadTheme","themeName","error"],"mappings":"AAAA,MAAMA,IAAe,oBAAI,IAAG;AASrB,eAAeC,EAAUC,GAAW;AACzC,MAAI,CAAAF,EAAa,IAAIE,CAAS;AAI9B,QAAI;AACF,cAAQA,GAAS;AAAA,QACf,KAAK;AACH,gBAAM,OAAO,oBAA0B;AACvC;AAAA,QACF,KAAK;AACH,gBAAM,OAAO,oBAA0B,GACvC,MAAM,OAAO,yBAA+B;AAC5C;AAAA,QACF,KAAK;AACH,gBAAM,OAAO,6BAAmC;AAChD;AAAA,QACF;AACE,kBAAQ,KAAK,UAAUA,CAAS,cAAc;AAC9C;AAAA,MACR;AACI,MAAAF,EAAa,IAAIE,CAAS;AAAA,IAC5B,SAASC,GAAO;AACd,oBAAQ,MAAM,yBAAyBD,CAAS,MAAMC,CAAK,GACrDA;AAAA,IACR;AACF;"}